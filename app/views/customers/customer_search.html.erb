

<% if current_user.employee? %>
<div class="container">
  <div class="form-group row">
    <div class="col-xs-8">
      <input type="text" id="pac-input" class="form-control" placeholder="Search Box"/>
    </div>
  </div>

  <div class="row">
    <div class="col-xs-12" style="padding-bottom:5px;">
      <div id="map" class="col-xs-12" style='height: 400px; text-align:center;'></div>
    </div>

    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.742966, lng: -74.006865},
          zoom: 13,
          mapTypeId: 'roadmap'
        });
        var infowindow = new google.maps.InfoWindow();

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            <%# var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            }; %>

            // Create a marker for each place.
            var marker = new google.maps.Marker({
              map: map,
              /*icon: icon,*/
              title: place.name,
              position: place.geometry.location
            });
            markers.push(marker);
            google.maps.event.addListener(marker, 'click', function() {
              var lat = place.geometry.location.lat();
              var lng = place.geometry.location.lng();
              infowindow.setContent("<b>" + place.name + "," + place.geometry.location + "," + lat + "," + lng + "</b>");
              infowindow.open(map, this);
            });

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDL2wPKf7Jwr_YvGOiAp8QwEbOfEaJqWJE&libraries=places&callback=initAutocomplete"
         async defer></script>
  </div>
</div>

<% end %>